/*
 * bbdservice.com Inc.
 * Copyright (c) 2017 All Rights Reserved.
 */
package com.bbd.bdsso.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.bbd.bdsso.common.dal.daointerface.SsoAuthDAO;

// auto generated imports
import com.bbd.bdsso.common.dal.dataobject.SsoAuthDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import com.bbd.bdsso.common.dal.dataobject.SsoAuthDO;
import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.bbd.bdsso.common.dal.daointerface.SsoAuthDAO</tt>.
 *
 * This file is generated by <tt>bdsso-bbdalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bdsso</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/bbdalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/sso_auth.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bdsso-bbdalgen</tt> 
 * to generate this file.
 *
 * @author Byron Zhang
 * @version $Id: description-java.vm,v 1.1 2016/05/01 07:34:20 byron Exp $
 */
public class IbatisSsoAuthDAO extends SqlMapClientDaoSupport implements SsoAuthDAO {
	/**
	 *  Insert one <tt>SsoAuthDO</tt> object to DB table <tt>sso_auth</tt>, return primary key
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into sso_auth(auth_code,auth_name,app_id,is_enable,description,last_modifier,gmt_create,gmt_modified) values (?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param ssoAuth
	 *	@return Integer
	 *	@throws DataAccessException
	 */	 
    public Integer insert(SsoAuthDO ssoAuth) throws DataAccessException {
    	if (ssoAuth == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-SSO-AUTH-INSERT", ssoAuth);

        return ssoAuth.getId();
    }

	/**
	 *  Delete records from DB table <tt>sso_auth</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from sso_auth where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int delete(Integer id) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-SSO-AUTH-DELETE", id);
    }

	/**
	 *  Update DB table <tt>sso_auth</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update sso_auth set auth_code=?, auth_name=?, app_id=?, is_enable=?, description=?, last_modifier=?, gmt_modified=? where (id = ?)</tt>
	 *
	 *	@param ssoAuth
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(SsoAuthDO ssoAuth) throws DataAccessException {
    	if (ssoAuth == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-SSO-AUTH-UPDATE", ssoAuth);
    }

	/**
	 *  Query DB table <tt>sso_auth</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, auth_code, auth_name, app_id, is_enable, description, last_modifier, gmt_create, gmt_modified from sso_auth where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return SsoAuthDO
	 *	@throws DataAccessException
	 */	 
    public SsoAuthDO query(Integer id) throws DataAccessException {

        return (SsoAuthDO) getSqlMapClientTemplate().queryForObject("MS-SSO-AUTH-QUERY", id);

    }

	/**
	 *  Query DB table <tt>sso_auth</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, auth_code, auth_name, app_id, is_enable, description, last_modifier, gmt_create, gmt_modified from sso_auth where (app_id = ?)</tt>
	 *
	 *	@param appId
	 *	@return List<SsoAuthDO>
	 *	@throws DataAccessException
	 */	 
    public List<SsoAuthDO> queryByAppId(Integer appId) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-SSO-AUTH-QUERY-BY-APP-ID", appId);

    }

	/**
	 *  Query DB table <tt>sso_auth</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, auth_code, auth_name, app_id, is_enable, description, last_modifier, gmt_create, gmt_modified from sso_auth where (auth_code = ?)</tt>
	 *
	 *	@param authCode
	 *	@return SsoAuthDO
	 *	@throws DataAccessException
	 */	 
    public SsoAuthDO queryByAuthCode(String authCode) throws DataAccessException {

        return (SsoAuthDO) getSqlMapClientTemplate().queryForObject("MS-SSO-AUTH-QUERY-BY-AUTH-CODE", authCode);

    }

	/**
	 *  Query DB table <tt>sso_auth</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, auth_code, auth_name, app_id, is_enable, description, last_modifier, gmt_create, gmt_modified from sso_auth where (auth_name = ?)</tt>
	 *
	 *	@param authName
	 *	@return SsoAuthDO
	 *	@throws DataAccessException
	 */	 
    public SsoAuthDO queryByAuthName(String authName) throws DataAccessException {

        return (SsoAuthDO) getSqlMapClientTemplate().queryForObject("MS-SSO-AUTH-QUERY-BY-AUTH-NAME", authName);

    }

	/**
	 *  Query DB table <tt>sso_auth</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select b.id id, b.auth_code auth_code, b.auth_name auth_name, b.app_id app_id, b.is_enable is_enable, c.description description, b.last_modifier last_modifier, b.gmt_create gmt_create, b.gmt_modified gmt_modified from sso_role a, sso_auth b, sso_role_auth c where ((a.id = c.role_id) AND (b.id = c.auth_id))</tt>
	 *
	 *	@param roleName
	 *	@return List<SsoAuthDO>
	 *	@throws DataAccessException
	 */	 
    public List<SsoAuthDO> queryByRoleName(String roleName) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-SSO-AUTH-QUERY-BY-ROLE-NAME", roleName);

    }

	/**
	 *  Query DB table <tt>sso_auth</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select e.id id, e.app_id app_id, e.auth_code auth_code, e.auth_name auth_name, e.description description, e.is_enable is_enable, e.last_modifier last_modifier, e.gmt_create gmt_create, e.gmt_modified gmt_modified from sso_user a, sso_user_role b, sso_role c, sso_role_auth d, sso_auth e, sso_app f where ((a.id = b.user_id) AND (b.role_id = d.role_id) AND (d.auth_id = e.id) AND (e.app_id = f.id) AND (a.is_enable = 1) AND (e.is_enable = 1))</tt>
	 *
	 *	@param userId
	 *	@param appName
	 *	@return List<SsoAuthDO>
	 *	@throws DataAccessException
	 */	 
    public List<SsoAuthDO> queryByAppIdAndUserName(String userId, String appName) throws DataAccessException {
        Map param = new HashMap();

        param.put("userId", userId);
        param.put("appName", appName);

        return getSqlMapClientTemplate().queryForList("MS-SSO-AUTH-QUERY-BY-APP-ID-AND-USER-NAME", param);

    }

	/**
	 *  Delete records from DB table <tt>sso_auth</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from sso_auth where (description LIKE ?)</tt>
	 *
	 *	@param description
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByDesc(String description) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-SSO-AUTH-DELETE-BY-DESC", description);
    }

}
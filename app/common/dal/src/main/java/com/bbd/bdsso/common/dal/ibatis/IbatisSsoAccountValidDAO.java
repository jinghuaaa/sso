/*
 * bbdservice.com Inc.
 * Copyright (c) 2017 All Rights Reserved.
 */
package com.bbd.bdsso.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.bbd.bdsso.common.dal.daointerface.SsoAccountValidDAO;

// auto generated imports
import com.bbd.bdsso.common.dal.dataobject.SsoAccountValidDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.bbd.bdsso.common.dal.daointerface.SsoAccountValidDAO</tt>.
 *
 * This file is generated by <tt>bdsso-bbdalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bdsso</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/bbdalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/sso_account_valid.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bdsso-bbdalgen</tt> 
 * to generate this file.
 *
 * @author Byron Zhang
 * @version $Id: description-java.vm,v 1.1 2016/05/01 07:34:20 byron Exp $
 */
public class IbatisSsoAccountValidDAO extends SqlMapClientDaoSupport implements SsoAccountValidDAO {
	/**
	 *  Insert one <tt>SsoAccountValidDO</tt> object to DB table <tt>sso_account_valid</tt>, return primary key
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into sso_account_valid(email,verify_code,is_verified,type,valid_date,description,gmt_create,gmt_modified) values (?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param ssoAccountValid
	 *	@return Integer
	 *	@throws DataAccessException
	 */	 
    public Integer insert(SsoAccountValidDO ssoAccountValid) throws DataAccessException {
    	if (ssoAccountValid == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-SSO-ACCOUNT-VALID-INSERT", ssoAccountValid);

        return ssoAccountValid.getId();
    }

	/**
	 *  Delete records from DB table <tt>sso_account_valid</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from sso_account_valid where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int delete(Integer id) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-SSO-ACCOUNT-VALID-DELETE", id);
    }

	/**
	 *  Update DB table <tt>sso_account_valid</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update sso_account_valid set email=?, verify_code=?, is_verified=?, type=?, valid_date=?, description=?, gmt_modified=? where (id = ?)</tt>
	 *
	 *	@param ssoAccountValid
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(SsoAccountValidDO ssoAccountValid) throws DataAccessException {
    	if (ssoAccountValid == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-SSO-ACCOUNT-VALID-UPDATE", ssoAccountValid);
    }

	/**
	 *  Update DB table <tt>sso_account_valid</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update sso_account_valid set is_verified=?, gmt_modified=? where ((email = ?) AND (type = ?))</tt>
	 *
	 *	@param isVerified
	 *	@param gmtModified
	 *	@param email
	 *	@param type
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateByEmailAndType(int isVerified, Date gmtModified, String email, int type) throws DataAccessException {
        Map param = new HashMap();

        param.put("isVerified", new Integer(isVerified));
        param.put("gmtModified", gmtModified);
        param.put("email", email);
        param.put("type", new Integer(type));

        return getSqlMapClientTemplate().update("MS-SSO-ACCOUNT-VALID-UPDATE-BY-EMAIL-AND-TYPE", param);
    }

	/**
	 *  Query DB table <tt>sso_account_valid</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, email, verify_code, is_verified, type, valid_date, description, gmt_create, gmt_modified from sso_account_valid where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return SsoAccountValidDO
	 *	@throws DataAccessException
	 */	 
    public SsoAccountValidDO query(Integer id) throws DataAccessException {

        return (SsoAccountValidDO) getSqlMapClientTemplate().queryForObject("MS-SSO-ACCOUNT-VALID-QUERY", id);

    }

	/**
	 *  Query DB table <tt>sso_account_valid</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, email, verify_code, is_verified, type, valid_date, description, gmt_create, gmt_modified from sso_account_valid where (email = ?)</tt>
	 *
	 *	@param email
	 *	@return SsoAccountValidDO
	 *	@throws DataAccessException
	 */	 
    public SsoAccountValidDO queryByEmail(String email) throws DataAccessException {

        return (SsoAccountValidDO) getSqlMapClientTemplate().queryForObject("MS-SSO-ACCOUNT-VALID-QUERY-BY-EMAIL", email);

    }

	/**
	 *  Query DB table <tt>sso_account_valid</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, email, verify_code, is_verified, type, valid_date, description, gmt_create, gmt_modified from sso_account_valid where ((email = ?) AND (verify_code = ?) AND (is_verified = 0) AND (type = ?))</tt>
	 *
	 *	@param email
	 *	@param verifyCode
	 *	@param type
	 *	@return SsoAccountValidDO
	 *	@throws DataAccessException
	 */	 
    public SsoAccountValidDO queryByEmailAndVerifyCode(String email, String verifyCode, int type) throws DataAccessException {
        Map param = new HashMap();

        param.put("email", email);
        param.put("verifyCode", verifyCode);
        param.put("type", new Integer(type));

        return (SsoAccountValidDO) getSqlMapClientTemplate().queryForObject("MS-SSO-ACCOUNT-VALID-QUERY-BY-EMAIL-AND-VERIFY-CODE", param);

    }

	/**
	 *  Delete records from DB table <tt>sso_account_valid</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from sso_account_valid where (description LIKE ?)</tt>
	 *
	 *	@param description
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByDesc(String description) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-SSO-ACCOUNT-VALID-DELETE-BY-DESC", description);
    }

}
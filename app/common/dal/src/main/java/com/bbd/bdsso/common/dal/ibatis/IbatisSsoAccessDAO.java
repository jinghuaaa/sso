/*
 * bbdservice.com Inc.
 * Copyright (c) 2017 All Rights Reserved.
 */
package com.bbd.bdsso.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.bbd.bdsso.common.dal.daointerface.SsoAccessDAO;

// auto generated imports
import com.bbd.bdsso.common.dal.dataobject.SsoAccessDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import com.bbd.bdsso.common.dal.dataobject.SsoAccessDO;

/**
 * An ibatis based implementation of dao interface <tt>com.bbd.bdsso.common.dal.daointerface.SsoAccessDAO</tt>.
 *
 * This file is generated by <tt>bdsso-bbdalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bdsso</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/bbdalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/sso_access.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bdsso-bbdalgen</tt> 
 * to generate this file.
 *
 * @author Byron Zhang
 * @version $Id: description-java.vm,v 1.1 2016/05/01 07:34:20 byron Exp $
 */
public class IbatisSsoAccessDAO extends SqlMapClientDaoSupport implements SsoAccessDAO {
	/**
	 *  Insert one <tt>SsoAccessDO</tt> object to DB table <tt>sso_access</tt>, return primary key
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into sso_access(user_id,token,valid_date,description,gmt_create,gmt_modified) values (?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param ssoAccess
	 *	@return Integer
	 *	@throws DataAccessException
	 */	 
    public Integer insert(SsoAccessDO ssoAccess) throws DataAccessException {
    	if (ssoAccess == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-SSO-ACCESS-INSERT", ssoAccess);

        return ssoAccess.getId();
    }

	/**
	 *  Delete records from DB table <tt>sso_access</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from sso_access where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int delete(Integer id) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-SSO-ACCESS-DELETE", id);
    }

	/**
	 *  Delete records from DB table <tt>sso_access</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from sso_access where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserId(Integer userId) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-SSO-ACCESS-DELETE-BY-USER-ID", userId);
    }

	/**
	 *  Delete records from DB table <tt>sso_access</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from sso_access where ((user_id = ?) AND (token = ?))</tt>
	 *
	 *	@param userId
	 *	@param token
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserIdAndToken(Integer userId, String token) throws DataAccessException {
        Map param = new HashMap();

        param.put("userId", userId);
        param.put("token", token);

        return getSqlMapClientTemplate().delete("MS-SSO-ACCESS-DELETE-BY-USER-ID-AND-TOKEN", param);
    }

	/**
	 *  Update DB table <tt>sso_access</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update sso_access set user_id=?, token=?, valid_date=?, description=?, gmt_modified=? where (id = ?)</tt>
	 *
	 *	@param ssoAccess
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(SsoAccessDO ssoAccess) throws DataAccessException {
    	if (ssoAccess == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-SSO-ACCESS-UPDATE", ssoAccess);
    }

	/**
	 *  Update DB table <tt>sso_access</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update sso_access set valid_date=?, gmt_modified=? where (user_id = ?)</tt>
	 *
	 *	@param validDate
	 *	@param gmtModified
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateValidDate(Date validDate, Date gmtModified, Integer userId) throws DataAccessException {
        Map param = new HashMap();

        param.put("validDate", validDate);
        param.put("gmtModified", gmtModified);
        param.put("userId", userId);

        return getSqlMapClientTemplate().update("MS-SSO-ACCESS-UPDATE-VALID-DATE", param);
    }

	/**
	 *  Query DB table <tt>sso_access</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, token, valid_date, description, gmt_create, gmt_modified from sso_access where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return SsoAccessDO
	 *	@throws DataAccessException
	 */	 
    public SsoAccessDO query(Integer id) throws DataAccessException {

        return (SsoAccessDO) getSqlMapClientTemplate().queryForObject("MS-SSO-ACCESS-QUERY", id);

    }

	/**
	 *  Query DB table <tt>sso_access</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, token, valid_date, description, gmt_create, gmt_modified from sso_access</tt>
	 *
	 *	@return List<SsoAccessDO>
	 *	@throws DataAccessException
	 */	 
    public List<SsoAccessDO> queryAll() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-SSO-ACCESS-QUERY-ALL", null);

    }

	/**
	 *  Query DB table <tt>sso_access</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, token, valid_date, description, gmt_create, gmt_modified from sso_access where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return SsoAccessDO
	 *	@throws DataAccessException
	 */	 
    public SsoAccessDO queryByUserId(Integer userId) throws DataAccessException {

        return (SsoAccessDO) getSqlMapClientTemplate().queryForObject("MS-SSO-ACCESS-QUERY-BY-USER-ID", userId);

    }

	/**
	 *  Query DB table <tt>sso_access</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, token, valid_date, description, gmt_create, gmt_modified from sso_access where (token = ?)</tt>
	 *
	 *	@param token
	 *	@return SsoAccessDO
	 *	@throws DataAccessException
	 */	 
    public SsoAccessDO queryByToken(String token) throws DataAccessException {

        return (SsoAccessDO) getSqlMapClientTemplate().queryForObject("MS-SSO-ACCESS-QUERY-BY-TOKEN", token);

    }

	/**
	 *  Query DB table <tt>sso_access</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, token, valid_date, description, gmt_create, gmt_modified from sso_access where ((user_id = ?) AND (token = ?))</tt>
	 *
	 *	@param userId
	 *	@param token
	 *	@return SsoAccessDO
	 *	@throws DataAccessException
	 */	 
    public SsoAccessDO queryByUserIdAndToken(Integer userId, String token) throws DataAccessException {
        Map param = new HashMap();

        param.put("userId", userId);
        param.put("token", token);

        return (SsoAccessDO) getSqlMapClientTemplate().queryForObject("MS-SSO-ACCESS-QUERY-BY-USER-ID-AND-TOKEN", param);

    }

	/**
	 *  Query DB table <tt>sso_access</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, token, valid_date, description, gmt_create, gmt_modified from sso_access where (valid_date = ?)</tt>
	 *
	 *	@param validDate
	 *	@return List<SsoAccessDO>
	 *	@throws DataAccessException
	 */	 
    public List<SsoAccessDO> queryByDate(Date validDate) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-SSO-ACCESS-QUERY-BY-DATE", validDate);

    }

	/**
	 *  Query DB table <tt>sso_access</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select a.id id, a.user_id user_id, a.token token, a.description description, a.valid_date valid_date, a.gmt_create gmt_create, a.gmt_modified gmt_modified from sso_access a, sso_user b where ((a.user_id = b.id) AND (b.is_enable = 1))</tt>
	 *
	 *	@param userId
	 *	@param token
	 *	@return SsoAccessDO
	 *	@throws DataAccessException
	 */	 
    public SsoAccessDO checkValid(String userId, String token) throws DataAccessException {
        Map param = new HashMap();

        param.put("userId", userId);
        param.put("token", token);

        return (SsoAccessDO) getSqlMapClientTemplate().queryForObject("MS-SSO-ACCESS-CHECK-VALID", param);

    }

	/**
	 *  Delete records from DB table <tt>sso_access</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from sso_access where (description LIKE ?)</tt>
	 *
	 *	@param description
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByDesc(String description) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-SSO-ACCESS-DELETE-BY-DESC", description);
    }

}